{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Plotly","window","Plot","createPlotlyComponent","math","require","App","state","counter","expressions","x","y","minX","maxX","minY","maxY","gridOption","graphName","yAxis","xAxis","fxs","data","type","marker","color","name","visible","layout","title","showlegend","xaxis","yaxis","config","responsive","modeBarButtonsToRemove","displaylogo","frames","scrollZoom","baseState","init_plotty","calculation","string_fx","expr","parse","compile","xValues","range","toArray","yValues","map","x1","evaluate","console","log","onFormSubmit","event","preventDefault","traces","functions","slice","push","fx1","fx","trace","setState","onAdd","onRemove","onReset","i","this","target","value","className","onSubmit","onChange","onHandleChange","placeholder","e","onClick","el","onFxChange","bind","tabIndex","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iTAUMA,EAASC,OAAOD,OAChBE,EAAOC,IAAsBH,GAE7BI,EAAOC,EAAQ,IAwbNC,E,4MApbZC,MAAQ,CAELC,QAAS,EACTC,YAAc,GAGdC,EAAG,GACHC,EAAG,GACHC,KAAM,EACNC,KAAM,IACNC,MAAO,IACXC,KAAM,IACNC,YAAY,EAERC,UAAW,GACXC,MAAO,GACPC,MAAO,GAEPC,IAAK,GAOLC,KAAM,CAEH,CACGX,EAAG,EAAE,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAC1BC,EAAG,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,KACrBW,KAAM,UACNC,OAAQ,CAAEC,MAAO,OACjBC,KAAM,aAET,CACGf,EAAG,CAAC,EAAG,GACPC,EAAG,CAAC,EAAG,KACPW,KAAM,UACNC,OAAQ,CAAEC,MAAO,SACjBC,KAAM,YACNC,SAAS,IAIfC,OAAQ,CACLC,MAAO,iBACPC,YAAY,EAEZC,MAAO,CACJF,MAAO,kBAEVG,MAAO,CACJH,MAAO,mBAGbI,OAAQ,CACLC,YAAY,EACZC,uBAAwB,CACrB,QACA,WACA,UACA,eACA,YACA,SACA,WACA,YACA,eAEHC,aAAa,GAEhBC,OAAQ,CAAC,CAAEC,YAAY,K,EAG1BC,UAAY,EAAK/B,M,EAEjBgC,YAAc,a,EAIdC,YAAc,SAACC,GAEZ,IACMC,EADOtC,EAAKuC,MAAMF,GACNG,UAIZC,EAAUzC,EAAK0C,MAAM,EAAKvC,MAAMK,KAAM,EAAKL,MAAMM,KAAM,GAAGkC,UAC1DC,EAAUH,EAAQI,KAAI,SAAUC,GAEpC,OAAOR,EAAKS,SAAS,CAACzC,EAAGwC,OAK3B,OAFAE,QAAQC,IAAIR,EAASG,GAEd,CAACH,EAASG,I,EAUpBM,aAAe,SAACC,GACbA,EAAMC,iBACNJ,QAAQC,IAAI,EAAK9C,OAEjB,IAAIkD,EAAS,GAET9B,EAAS,CACVG,MAAO,CACJF,MAAO,EAAKrB,MAAMY,OAErBY,MAAO,CACJH,MAAO,EAAKrB,MAAMW,OAErBU,MAAO,EAAKrB,MAAMU,UAClBY,WAAY,EAAKtB,MAAMS,YAGtB0C,EAAY,EAAKnD,MAAMa,IAAIuC,QAC/BD,EAAUE,KAAK,EAAKrD,MAAMsD,KAC1BH,EAAUT,KAAI,SAAAa,GACX,GAAGA,EAAG,CAAC,IAAD,EACsB,EAAKtB,YAAYsB,GADvC,mBAECC,EAAQ,CACTrD,EAHA,KAIAC,EAJA,KAKAW,KAAM,UACNC,OAAQ,CAAEC,MAAO,QAEpBiC,EAAOG,KAAKG,OAKlB,EAAKC,SAAS,CACX3C,KAAMoC,EACN9B,OAAQA,IAGXyB,QAAQC,IAAI,S,EAGfY,MAAQ,SAACV,GACNA,EAAMC,iBACN,EAAKQ,SAAS,CACX5C,IAAI,GAAD,mBAAM,EAAKb,MAAMa,KAAjB,CAAsB,Q,EAI/B8C,SAAW,SAACX,GACTH,QAAQC,IAAI,W,EAGfc,QAAU,SAACZ,GACRA,EAAMC,kB,yDA3DEY,EAAGb,GACX,IAAInC,EAAG,YAAOiD,KAAK9D,MAAMa,KACzBA,EAAIgD,GAAKb,EAAMe,OAAOC,MACtBF,KAAKL,SAAS,CAAE5C,U,+BA2DT,IAAD,OAIN,OAFAiD,KAAK9B,cAKF,6BACG,yBAAKiC,UAAU,YACZ,yBAAKA,UAAU,6CAEZ,yBAAKA,UAAU,mBACZ,kBAACtE,EAAD,CACGmB,KAAMgD,KAAK9D,MAAMc,KACjBM,OAAQ0C,KAAK9D,MAAMoB,OACnBK,OAAQqC,KAAK9D,MAAMyB,OACnBI,OAAQiC,KAAK9D,MAAM6B,UAMzB,yBAAKoC,UAAU,yBACZ,yBAAKA,UAAU,cAEZ,0BACGC,SAAUJ,KAAKf,aACfoB,SAAUL,KAAKM,eACfH,UAAU,WAGV,yBAAKA,UAAU,uBACZ,yBAAKA,UAAU,UACZ,yBAAKA,UAAU,oBACZ,6CACA,2BACGlD,KAAK,OACLsD,YAAY,cACZF,SAAU,SAACG,GAAD,OACP,EAAKb,SAAS,CACX/C,UAAW4D,EAAEP,OAAOC,cAUtC,yBAAKC,UAAU,iBACZ,yBAAKA,UAAU,kBACZ,4CAEH,yBAAKA,UAAU,kBACZ,yBAAKA,UAAU,YACZ,2BACGlD,KAAK,OACLsD,YAAY,oBACZF,SAAU,SAACG,GAAD,OACP,EAAKb,SAAS,CACX7C,MAAO0D,EAAEP,OAAOC,aAM/B,yBAAKC,UAAU,mBACZ,yBAAKA,UAAU,yBACZ,yBAAKA,UAAU,kBAAf,OACA,2BACGlD,KAAK,OACLoD,SAAU,SAACG,GAAD,OACP,EAAKb,SAAS,CACXpD,KAAMiE,EAAEP,OAAOC,SAGrBA,MAAOF,KAAK9D,MAAMK,KAClBgE,YAAY,qBAIrB,yBAAKJ,UAAU,mBACZ,yBAAKA,UAAU,yBACZ,yBAAKA,UAAU,kBAAf,OACA,2BACGlD,KAAK,OACLiD,MAAOF,KAAK9D,MAAMM,KAClB6D,SAAU,SAACG,GAAD,OACP,EAAKb,SAAS,CACXnD,KAAMgE,EAAEP,OAAOC,SAGrBK,YAAY,sBAQxB,yBAAKJ,UAAU,iBACZ,yBAAKA,UAAU,kBACZ,4CAEH,yBAAKA,UAAU,kBACZ,yBAAKA,UAAU,YACZ,2BACGlD,KAAK,OACLsD,YAAY,oBACZF,SAAU,SAACG,GAAD,OACP,EAAKb,SAAS,CACX9C,MAAO2D,EAAEP,OAAOC,aAM/B,yBAAKC,UAAU,mBACZ,yBAAKA,UAAU,yBACZ,yBAAKA,UAAU,kBAAf,OACA,2BACGlD,KAAK,OACLoD,SAAU,SAACG,GAAD,OACP,EAAKb,SAAS,CACXlD,KAAM+D,EAAEP,OAAOC,SAGrBA,MAAOF,KAAK9D,MAAMO,KAClB8D,YAAY,qBAIrB,yBAAKJ,UAAU,mBACZ,yBAAKA,UAAU,yBACZ,yBAAKA,UAAU,kBAAf,OACA,2BACGlD,KAAK,OACLoD,SAAU,SAACG,GAAD,OACP,EAAKb,SAAS,CACXjD,KAAM8D,EAAEP,OAAOC,SAGrBA,MAAOF,KAAK9D,MAAMQ,KAC7C6D,YAAY,sBAOG,yBAAKJ,UAAU,iBACZ,yBAAKA,UAAU,kBACZ,+BACG,mCAGN,yBAAKA,UAAU,kBACZ,+BACG,mCAGN,yBAAKA,UAAU,oBACZ,2BAAOlD,KAAK,OAAOsD,YAAY,UAC/BF,SAAU,SAAAG,GAEP,EAAKb,SAAS,CAAEH,IAAKgB,EAAEP,OAAOC,YAIxD,yBAAKC,UAAU,kBACQ,yBAAKA,UAAU,yBACZ,yBAAKA,UAAU,kBAAf,QACA,2BACGlD,KAAK,OAOhCsD,YAAY,iCAKM,yBAAKJ,UAAU,kBACZ,4BACGA,UAAU,iBACVM,QAAST,KAAKJ,OACd,uBAAGO,UAAU,wBAMrBH,KAAK9D,MAAMa,IAAI6B,KAAI,SAAC8B,EAAIX,GAAL,OACjB,yBAAKI,UAAU,iBACZ,yBAAKA,UAAU,kBACZ,+BACG,mCAGN,yBAAKA,UAAU,kBACZ,+BACG,mCAGN,yBAAKA,UAAU,oBACZ,2BAAOlD,KAAK,OAAOsD,YAAY,UAC/BF,SAAU,EAAKM,WAAWC,KAAK,EAAMb,MAGxC,yBAAKI,UAAU,kBACZ,yBAAKA,UAAU,yBACZ,yBAAKA,UAAU,kBAAf,QACA,2BACGlD,KAAK,OACLsD,YAAY,qBAMrB,yBAAKJ,UAAU,kBACZ,4BACGA,UAAU,iBACVM,QAAS,EAAKZ,UACd,uBAAGM,UAAU,gCAQzB,yBAAKA,UAAU,iBAC9B,yBAAKA,UAAU,sBACjB,2BAAOlD,KAAK,WAAW4D,SAAS,IAAIV,UAAU,SAC9CE,SAAU,SAAAG,GACT,EAAKb,SAAS,CAAChD,WAAa6D,EAAEP,OAAOC,SAEtCA,MAAOF,KAAK9D,MAAMS,aAClB,gDAKiB,yBAAKwD,UAAU,iBACZ,yBAAKA,UAAU,UACZ,4BACGA,UAAU,sCACVM,QAAST,KAAKF,SAEd,uBAAGK,UAAU,oBAJhB,WAQH,yBAAKA,UAAU,SACZ,4BACGA,UAAU,sCACV,uBAAGA,UAAU,qBAFhB,qB,GApafW,IAAMC,WCJJC,QACW,cAA7BpF,OAAOqF,SAASC,UAEe,UAA7BtF,OAAOqF,SAASC,UAEhBtF,OAAOqF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.0d7ac42e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n// import FxForm from './Components/FxForm'\r\n\r\n// import {\r\n//    evaluate\r\n//    // atan2, chain, derivative, e, log, pi, pow, round, sqrt\r\n//  } from 'mathjs';\r\n\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nconst Plotly = window.Plotly;\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst math = require('mathjs');\r\n\r\n\r\nclass App extends React.Component {\r\n   state = {\r\n\r\n      counter: 1,\r\n      expressions : [],\r\n\r\n      // configable parts\r\n      x: [],\r\n      y: [],\r\n      minX: 0,\r\n      maxX: 1000,\r\n      minY: -1000,\r\n\t\tmaxY: 1000,\r\n\t\tgridOption: false,\r\n\r\n      graphName: \"\",\r\n      yAxis: \"\",\r\n      xAxis: \"\",\r\n\r\n      fxs: [],\r\n\r\n      // fx1: \"\",\r\n\r\n      /*\r\n\t\tconfig\r\n\t\t*/\r\n      data: [\r\n         // called trace.\r\n         {\r\n            x: [-50, -60, 1, 2, 3, 4, 5],\r\n            y: [1, 4, 9, 16, 25, 100],\r\n            type: \"scatter\",\r\n            marker: { color: \"red\" },\r\n            name: \"Red Trace\",\r\n         },\r\n         {\r\n            x: [0, 0],\r\n            y: [0, 1000],\r\n            type: \"scatter\",\r\n            marker: { color: \"green\" },\r\n            name: \"Red Trace\",\r\n            visible: false,\r\n         },\r\n\r\n      ],\r\n      layout: {\r\n         title: \"Title of Graph\",\r\n         showlegend: true,\r\n\r\n         xaxis: {\r\n            title: \"Name of X-Axis\",\r\n         },\r\n         yaxis: {\r\n            title: \"Name of Y-Axis\",\r\n         },\r\n      },\r\n      config: {\r\n         responsive: true,\r\n         modeBarButtonsToRemove: [\r\n            \"pan2d\",\r\n            \"select2d\",\r\n            \"lasso2d\",\r\n            \"resetScale2d\",\r\n            \"zoomOut2d\",\r\n            \"zoom2d\",\r\n            \"zoomIn2d\",\r\n            \"zoomOut2d\",\r\n            \"autoScale2d\",\r\n         ],\r\n         displaylogo: false,\r\n      },\r\n      frames: [{ scrollZoom: true }],\r\n   };\r\n\r\n   baseState = this.state;\r\n\r\n   init_plotty = () => {\r\n\r\n   }\r\n\r\n   calculation = (string_fx) => {\r\n\r\n      const node = math.parse(string_fx);\r\n      const expr = node.compile();\r\n\r\n     \r\n      // evaluate the expression repeatedly for different values of x\r\n      const xValues = math.range(this.state.minX, this.state.maxX, 1).toArray();\r\n      const yValues = xValues.map(function (x1) {\r\n         // console.log(x);\r\n        return expr.evaluate({x: x1})\r\n      });\r\n\r\n      console.log(xValues, yValues);\r\n\r\n      return [xValues, yValues];\r\n   }\r\n\r\n\r\n   onFxChange(i, event) {\r\n      let fxs = [...this.state.fxs];\r\n      fxs[i] = event.target.value;\r\n      this.setState({ fxs });\r\n   }   \r\n\r\n   onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n      console.log(this.state);\r\n\r\n      let traces = [];\r\n\r\n      let layout = {\r\n         xaxis: {\r\n            title: this.state.xAxis,\r\n         },\r\n         yaxis: {\r\n            title: this.state.yAxis,\r\n         },\r\n         title: this.state.graphName,\r\n         showlegend: this.state.gridOption,\r\n      };\r\n\r\n      let functions = this.state.fxs.slice();\r\n      functions.push(this.state.fx1);\r\n      functions.map(fx => {\r\n         if(fx){\r\n            let [x_trace, y_trace] = this.calculation(fx);\r\n            let trace = {\r\n               x: x_trace,\r\n               y: y_trace,\r\n               type: \"scatter\",\r\n               marker: { color: \"red\" },\r\n            };\r\n            traces.push(trace);\r\n         }\r\n      })\r\n      \r\n\r\n      this.setState({\r\n         data: traces,\r\n         layout: layout,\r\n      });\r\n\r\n      console.log(\"huh?\");\r\n   };\r\n   \r\n   onAdd = (event) => {\r\n      event.preventDefault();\r\n      this.setState({\r\n         fxs: [...this.state.fxs, '']\r\n      })\r\n   };\r\n\r\n   onRemove = (event) => {\r\n      console.log('whatup');\r\n   }\r\n   \r\n   onReset = (event) => {\r\n      event.preventDefault();\r\n   };\r\n\r\n   render() {\r\n\r\n      this.init_plotty();\r\n      \r\n      return (\r\n\r\n\r\n         <div>\r\n            <div className=\"app-main\">\r\n               <div className=\"ui stackable two column row centered grid\">\r\n                  {/* Plot */}\r\n                  <div className=\"column plot-box\">\r\n                     <Plot\r\n                        data={this.state.data}\r\n                        layout={this.state.layout}\r\n                        config={this.state.config}\r\n                        frames={this.state.frames}\r\n                     />\r\n                  </div>\r\n\r\n                  {/* Config Pad */}\r\n\r\n                  <div className=\"column config-pad-box\">\r\n                     <div className=\"ui segment\">\r\n\r\n                        <form \r\n                           onSubmit={this.onFormSubmit} \r\n                           onChange={this.onHandleChange} \r\n                           className=\"ui form\" >\r\n\r\n                           {/*  Names */}\r\n                           <div className=\"ui equal width form\">\r\n                              <div className=\"fields\">\r\n                                 <div className=\"eight wide field\">\r\n                                    <label>Graph Name</label>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       placeholder=\"Graph Namee\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             graphName: e.target.value,\r\n                                          })\r\n                                       }\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n\r\n                           {/* X Range  */}\r\n\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"two wide field\">\r\n                                 <label>X-Axis :</label>\r\n                              </div>\r\n                              <div className=\"six wide field\">\r\n                                 <div className=\"ui input\">\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       placeholder=\"Name of X-Axis...\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             xAxis: e.target.value,\r\n                                          })\r\n                                       }\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"four wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Min</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             minX: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       value={this.state.minX}\r\n                                       placeholder=\"Enter Min X.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"four wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Max</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       value={this.state.maxX}\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             maxX: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       placeholder=\"Enter Max X.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n\r\n                           {/* Y Axis Range  */}\r\n\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"two wide field\">\r\n                                 <label>Y-Axis :</label>\r\n                              </div>\r\n                              <div className=\"six wide field\">\r\n                                 <div className=\"ui input\">\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       placeholder=\"Name of Y-Axis...\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             yAxis: e.target.value,\r\n                                          })\r\n                                       }\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"four wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Min</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             minY: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       value={this.state.minY}\r\n                                       placeholder=\"Enter Min Y.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"four wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Max</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             maxY: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       value={this.state.maxY}\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter Max Y.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n\r\n                           {/* Y = AX + B Functions   */}\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"one wide field\">\r\n                                 <label> \r\n                                    <h4>Y</h4>\r\n                                 </label>\r\n                              </div>\r\n                              <div className=\"one wide field\">\r\n                                 <label>\r\n                                    <h3>=</h3>\r\n                                 </label>\r\n                              </div>\r\n                              <div className=\"seven wide field\">\r\n                                 <input type=\"text\" placeholder=\"ax+b...\"\r\n                                 onChange={e => {\r\n                                    \r\n                                    this.setState({ fx1: e.target.value });\r\n                                 }}  />\r\n                              </div>\r\n                              \r\n\t\t\t\t\t\t\t\t\t\t<div className=\"six wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Name</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       // onChange={(e) =>\r\n                                       //    this.setState({\r\n                                       //       maxY: e.target.value,\r\n                                       //    })\r\n                                       // }\r\n                                       // value={this.state.maxY}\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter name of this line.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n\r\n                              <div className=\"one wide field\">\r\n                                 <button\r\n                                    className=\"ui icon button\"\r\n                                    onClick={this.onAdd} >\r\n                                    <i className=\"plus circle icon\"></i>\r\n                                 </button>\r\n                              </div>\r\n                           </div>\r\n                           \r\n                           {/* Dynamic Functions */}\r\n                           {this.state.fxs.map((el, i) => \r\n                              <div className=\"inline fields\">\r\n                                 <div className=\"one wide field\">\r\n                                    <label>\r\n                                       <h4>Y</h4>\r\n                                    </label>\r\n                                 </div>\r\n                                 <div className=\"one wide field\">\r\n                                    <label>\r\n                                       <h3>=</h3>\r\n                                    </label>\r\n                                 </div>\r\n                                 <div className=\"seven wide field\">\r\n                                    <input type=\"text\" placeholder=\"ax+b...\" \r\n                                    onChange={this.onFxChange.bind(this, i)} />\r\n                                 </div>\r\n                                 \r\n                                 <div className=\"six wide field\">\r\n                                    <div className=\"ui left labeled input\">\r\n                                       <div className=\"ui basic label\">Name</div>\r\n                                       <input\r\n                                          type=\"text\"\r\n                                          placeholder=\"Enter Max Y.. \"\r\n                                          // onChange={this.onFxChange.bind(this, i)}\r\n                                       />\r\n                                    </div>\r\n                                 </div>\r\n                     \r\n                                 <div className=\"one wide field\">\r\n                                    <button\r\n                                       className=\"ui icon button\"\r\n                                       onClick={this.onRemove} >\r\n                                       <i className=\"minus red circle icon\"></i>\r\n                                    </button>\r\n                                 </div>\r\n                              </div>         \r\n                           )} \r\n\r\n                            {/* Grid Options */}\r\n\r\n                           <div className=\"inline fields\">\r\n\t\t\t\t\t\t\t\t\t   <div className=\"ui toggle checkbox\">\r\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" tabIndex=\"0\" className=\"hidden\" \r\n\t\t\t\t\t\t\t\t\t\tonChange={e => {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({gridOption : e.target.value});\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.gridOption} />\r\n\t\t\t\t\t\t\t\t\t\t<label>Grid option</label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n                           </div>\r\n\r\n                           {/* Resset and  */}\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"field \">\r\n                                 <button\r\n                                    className=\"ui right labeled yellow icon button\"\r\n                                    onClick={this.onReset}\r\n                                 >\r\n                                    <i className=\"right undo icon\"></i>\r\n                                    RESET?\r\n                                 </button>\r\n                              </div>\r\n                              <div className=\"field\">\r\n                                 <button\r\n                                    className=\"ui right labeled pink icon button \" >\r\n                                    <i className=\"right arrow icon\"></i>\r\n                                    PLOT!\r\n                                 </button>\r\n                              </div>\r\n                           </div>\r\n                        </form>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}