{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Plotly","window","Plot","createPlotlyComponent","App","state","x","y","minX","maxX","minY","maxY","gridOption","graphName","yAxis","xAxis","data","type","marker","color","name","layout","title","showlegend","xaxis","yaxis","config","responsive","modeBarButtonsToRemove","displaylogo","frames","scrollZoom","baseState","onFormSubmit","event","preventDefault","traces","i","push","trace","setState","console","log","onAddFx","onReset","this","className","placeholder","onChange","e","target","value","onClick","addFxs","class","tabindex","checked","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f13ba7c7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nconst Plotly = window.Plotly;\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nclass App extends React.Component {\r\n   state = {\r\n      // configable parts\r\n      x: [],\r\n      y: [],\r\n      minX: 0,\r\n      maxX: 100,\r\n      minY: 0,\r\n\t\tmaxY: 100,\r\n\t\tgridOption: false,\r\n\r\n      graphName: \"\",\r\n      yAxis: \"\",\r\n      xAxis: \"\",\r\n\r\n      /*\r\n\t\tconfig\r\n\t\t*/\r\n      data: [\r\n         // called trace.\r\n         {\r\n            x: [-50, -60, 1, 2, 3, 4, 5],\r\n            y: [1, 4, 9, 16, 25, 100],\r\n            type: \"scatter\",\r\n            marker: { color: \"red\" },\r\n            name: \"Red Trace\",\r\n         },\r\n      ],\r\n      layout: {\r\n         title: \"Title of Graph\",\r\n         showlegend: true,\r\n\r\n         xaxis: {\r\n            title: \"Name of X-Axis\",\r\n         },\r\n         yaxis: {\r\n            title: \"Name of Y-Axis\",\r\n         },\r\n      },\r\n      config: {\r\n         responsive: true,\r\n         modeBarButtonsToRemove: [\r\n            \"pan2d\",\r\n            \"select2d\",\r\n            \"lasso2d\",\r\n            \"resetScale2d\",\r\n            \"zoomOut2d\",\r\n            \"zoom2d\",\r\n            \"zoomIn2d\",\r\n            \"zoomOut2d\",\r\n            \"autoScale2d\",\r\n         ],\r\n         displaylogo: false,\r\n      },\r\n      frames: [{ scrollZoom: true }],\r\n   };\r\n\r\n   baseState = this.state;\r\n\r\n   onInputChange(event) {\r\n      this.setState({});\r\n   }\r\n\r\n   onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n\r\n      let traces = [];\r\n\r\n      let layout = {\r\n         xaxis: {\r\n            title: this.state.xAxis,\r\n         },\r\n         yaxis: {\r\n            title: this.state.yAxis,\r\n         },\r\n         title: this.state.graphName,\r\n         showlegend: this.state.gridOption,\r\n      };\r\n\r\n      let x = [];\r\n      let y = [];\r\n\r\n      for (let i = +this.state.minX; i <= +this.state.maxX; i++) {\r\n         x.push(i);\r\n         y.push(i * i);\r\n      }\r\n\r\n      let trace = {\r\n         x: x,\r\n         y: y,\r\n         type: \"scatter\",\r\n         marker: { color: \"red\" },\r\n      };\r\n\r\n      traces.push(trace);\r\n      this.setState({\r\n         data: traces,\r\n         layout: layout,\r\n      });\r\n\r\n      console.log(\"huh?\");\r\n   };\r\n\r\n   onAddFx = (event) => {\r\n      event.preventDefault();\r\n   };\r\n\r\n   onReset = (event) => {\r\n      event.preventDefault();\r\n\r\n      // this.calculation();\r\n\r\n      this.setState(this.baseState);\r\n   };\r\n\r\n   render() {\r\n      console.log(\"??\");\r\n      return (\r\n         <div>\r\n            <div className=\"app-main\">\r\n               <div className=\"ui stackable two column row centered grid\">\r\n                  {/* Plot */}\r\n                  <div className=\"column plot-box\">\r\n                     <Plot\r\n                        data={this.state.data}\r\n                        layout={this.state.layout}\r\n                        config={this.state.config}\r\n                        frames={this.state.frames}\r\n                     />\r\n                  </div>\r\n\r\n                  {/* Config Pad */}\r\n\r\n                  <div className=\"column config-pad-box\">\r\n                     <div className=\"ui segment\">\r\n                        <form className=\"ui form\">\r\n                           {/*  Names */}\r\n                           <div className=\"ui equal width form\">\r\n                              <div className=\"fields\">\r\n                                 <div className=\"eight wide field\">\r\n                                    <label>Graph Name</label>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       placeholder=\"Graph Namee\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             graphName: e.target.value,\r\n                                          })\r\n                                       }\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n\r\n                           {/* X Range  */}\r\n\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"two wide field\">\r\n                                 <label>X-Axis :</label>\r\n                              </div>\r\n                              <div className=\"four wide field\">\r\n                                 <div className=\"ui input\">\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       placeholder=\"Name of X-Axis...\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             xAxis: e.target.value,\r\n                                          })\r\n                                       }\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"five wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Min</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             minX: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       value={this.state.minX}\r\n                                       placeholder=\"Enter Min X.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"five wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Max</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       value={this.state.maxX}\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             maxX: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       placeholder=\"Enter Max X.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n\r\n                           {/* Y Range  */}\r\n\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"two wide field\">\r\n                                 <label>Y-Axis :</label>\r\n                              </div>\r\n                              <div className=\"four wide field\">\r\n                                 <div className=\"ui input\">\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       placeholder=\"Name of Y-Axis...\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             yAxis: e.target.value,\r\n                                          })\r\n                                       }\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"five wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Min</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             minY: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       value={this.state.minY}\r\n                                       placeholder=\"Enter Min Y.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"five wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Max</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             maxY: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       value={this.state.maxY}\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter Max Y.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n\r\n                           {/* Functions   */}\r\n\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"one wide field\">\r\n                                 <label>\r\n                                    <h4>Y</h4>\r\n                                 </label>\r\n                              </div>\r\n                              <div className=\"one wide field\">\r\n                                 <label>\r\n                                    <h3>=</h3>\r\n                                 </label>\r\n                              </div>\r\n                              <div className=\"seven wide field\">\r\n                                 <input type=\"text\" placeholder=\"ax+b...\" />\r\n                              </div>\r\n                              <div className=\"one wide field\">\r\n                                 <button\r\n                                    className=\"ui icon button\"\r\n                                    onClick={this.addFxs}\r\n                                 >\r\n                                    <i className=\"plus circle icon\"></i>\r\n                                 </button>\r\n                              </div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"five wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Name</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       // onChange={(e) =>\r\n                                       //    this.setState({\r\n                                       //       maxY: e.target.value,\r\n                                       //    })\r\n                                       // }\r\n                                       // value={this.state.maxY}\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter Max Y.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n\r\n                           <div className=\"inline fields\">\r\n\t\t\t\t\t\t\t\t\t<div class=\"ui toggle checkbox\">\r\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" tabindex=\"0\" class=\"hidden\" \r\n\t\t\t\t\t\t\t\t\t\tonClick={e => {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.setState({gridOption : e.target.value});\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\tchecked={this.state.gridOption} />\r\n\t\t\t\t\t\t\t\t\t\t<label>Grid option</label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n                           </div>\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"field \">\r\n                                 <button\r\n                                    className=\"ui right labeled yellow icon button\"\r\n                                    onClick={this.onReset}\r\n                                 >\r\n                                    <i className=\"right undo icon\"></i>\r\n                                    REDO?\r\n                                 </button>\r\n                              </div>\r\n                              <div className=\"field\">\r\n                                 <button\r\n                                    className=\"ui right labeled pink icon button \"\r\n                                    onClick={this.onFormSubmit}\r\n                                    type=\"submit\"\r\n                                 >\r\n                                    <i className=\"right arrow icon\"></i>\r\n                                    PLOT!\r\n                                 </button>\r\n                              </div>\r\n                           </div>\r\n                        </form>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}