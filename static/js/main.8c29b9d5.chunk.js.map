{"version":3,"sources":["reducers/index.js","actions/index.js","components/Graphicachu.js","components/FxForm.js","AppRedux.js","serviceWorker.js","index.js"],"names":["math","require","initial","graphicachu","data","layout","title","showlegend","xaxis","domain","yaxis","config","responsive","modeBarButtonsToRemove","displaylogo","frames","scrollZoom","calculation","minX","maxX","fxs","id","name","fx","width","displayColorPicker","color","Math","random","toString","visible","compare","checkBoxDisabled","counterId","compareDisabled","calculateTrace","string_fx","expr","parse","compile","step","abs","xValues","range","toArray","yValues","map","x1","evaluate","x","fxFormReducer","state","action","fxsCopy","type","cId","push","Object","assign","splice","payload","index","numOfChecked","reduce","numOfCompare","forEach","combineReducers","submitFxForm","stateCopy","traces","selectOptions","fx_data","i","x_trace","y_trace","trace","y","marker","legendOptions","initialSelect","fetchFxs","addFx","removeFx","editFx","ctx","Plotly","window","Plot","createPlotlyComponent","Graphicachu","graphicahu","this","props","className","Component","connect","console","log","FxForm","onAdd","event","preventDefault","onCompare","onFormSubmit","handleCheckboxClick","fxCopy","target","checked","value","hex","key","data-content","disabled","onClick","bind","placeholder","onChange","onFxChangeGen","onFxColor_Click","style","background","onFxColor_Selected","onRemove","onSubmit","e","parseInt","fetchFxList","onReset","App","React","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","createStore","reducers","AppRedux","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yRAEMA,EAAOC,EAAQ,KAEfC,EAAU,CACbC,YAAc,CACXC,KAAM,GACNC,OAAQ,CACLC,MAAO,iBACPC,YAAY,EAEZC,MAAO,CACJF,MAAO,iBACPG,OAAQ,CAAC,EAAG,MAEfC,MAAO,CACJJ,MAAO,iBACPG,OAAQ,CAAC,EAAG,OAGlBE,OAAQ,CACLC,YAAY,EACZC,uBAAwB,CACrB,QACA,WACA,UACA,eACA,YACA,SACA,WACA,YACA,eAEHC,aAAa,GAEhBC,OAAQ,CAAC,CAAEC,YAAY,KAE1BC,YAAa,CACVC,KAAM,EACNC,KAAM,GAETC,IAAK,CACF,CACGC,GAAI,EACJC,KAAM,GACNC,GAAI,GACJC,MAAO,GACPC,oBAAoB,EACpBC,MAAO,KAAwB,SAAhBC,KAAKC,UAAwB,GAAGC,SAAS,IACxDC,SAAS,EACTC,SAAS,EACTC,kBAAkB,IAGxBC,UAAW,EACXC,iBAAiB,GAIdC,EAAiB,SAAClB,EAAamB,GAElC,IACMC,EADOrC,EAAKsC,MAAMF,GACNG,UAOZC,EAAQb,KAAKc,IAAIxB,EAAYE,KAAOF,EAAYC,MAAM,IAGtDwB,EAAU1C,EAAK2C,MAAM1B,EAAYC,KAAMD,EAAYE,KAAMqB,GAAMI,UAC/DC,EAAUH,EAAQI,KAAI,SAAUC,GAEpC,OAAOV,EAAKW,SAAS,CAACC,EAAGF,OAK3B,MAAO,CAACL,EAASG,IAsDdK,EAAgB,WAA+B,IAA9BC,EAA6B,uDAArBjD,EAAUkD,EAAW,uCAC7CC,EAAO,YAAOF,EAAM/B,KACxB,OAAOgC,EAAOE,MACX,IAAK,SAEF,IAAIC,EAAMJ,EAAMlB,UAAY,EAa5B,OAZAoB,EAAQG,KAAK,CACVnC,GAAIkC,EACJjC,KAAM,GACNC,GAAI,GACJC,MAAO,GACPC,oBAAoB,EACpBC,MAAO,KAAwB,SAAhBC,KAAKC,UAAwB,GAAGC,SAAS,IACxDC,SAAS,EACTC,SAAS,EACTC,kBAAkB,IAGdyB,OAAOC,OAAO,GAAIP,EAAO,CAC7B/B,IAAKiC,EACLpB,UAAWsB,IAEjB,IAAK,YAGF,OAFAF,EAAQM,OAAOP,EAAOQ,QAAQC,MAAO,GAE9BJ,OAAOC,OAAO,GAAIP,EAAO,CAC7B/B,IAAKiC,IAGX,IAAK,UACFA,EAAQD,EAAOQ,QAAQC,OAAST,EAAOQ,QAAQrC,GAE/C,IAAMuC,EAAeT,EAAQU,QAAO,SAACC,EAAczC,GAChD,OAAOyC,GAAgBzC,EAAGQ,QAAU,EAAI,KACxC,GAWH,OATAsB,EAAQY,SAAQ,SAAA1C,GACTuC,EAAe,EACZvC,EAAGQ,UACJR,EAAGS,kBAAmB,GAEzBT,EAAGS,kBAAmB,KAIrByB,OAAOC,OAAO,GAAIP,EAAO,CAC7B/B,IAAKiC,EACLnB,gBAAkB4B,EAAe,IAEvC,IAAK,YAEL,QACG,OAAOX,IAMDe,cAAgB,CAC5BC,aA9GwB,WAA+B,IAA9BhB,EAA6B,uDAArBjD,EAAUkD,EAAW,uCAEtD,OAAOA,EAAOE,MACX,IAAK,mBACF,IAAMc,EAAS,eAAOjB,GAClBkB,EAAS,GAAIC,EAAgB,GA8BjC,OA5BAlB,EAAOQ,QAAQxC,IAAI6C,SAAQ,SAACM,EAASC,GAClC,GAAGD,EAAQhD,GAAG,CAAC,IAAD,EAEcY,EAAeiB,EAAOQ,QAAQ3C,YAAasD,EAAQhD,IAFjE,mBAENkD,EAFM,KAEGC,EAFH,KAGPC,EAAQ,CACTrD,KAAMiD,EAAQjD,KACd2B,EAAGwB,EACHG,EAAGF,EACHpB,KAAM,UACNuB,OAAQ,CAAEnD,MAAO6C,EAAQ7C,OACzBI,QAASyC,EAAQzC,SAKpBuC,EAAOb,KAAKmB,GAKfL,EAAcd,KAAK,CAChBK,MAAOW,EACPlD,KAAMiD,EAAQjD,KAAMiD,EAAQjD,KAAtB,qBAA2CkD,EAAE,QAMlDf,OAAOC,OAAO,GAAIP,EAAO,CAC7BhD,YAAY,eACLiE,EAAUjE,YADN,CAERC,KAAMiE,EACNS,cAAgBR,EAChBS,cAAgB,EAChB1E,OAAQ+C,EAAOQ,QAAQvD,WAGhC,QACG,OAAO8C,IAkEb6B,SAAU9B,EACV+B,MAAO/B,EACPgC,SAAUhC,EACViC,OAAQjC,I,gCC5LEiB,EAAe,SAACiB,GACzB,MAAO,CACH9B,KAAO,mBACPM,QAAUwB,I,kBCNZC,EAASC,OAAOD,OAChBE,EAAOC,IAAsBH,GAE7BI,E,uKAQE,IAAMC,EAAU,eAAOC,KAAKC,MAAMzF,aAClC,OACI,yBAAK0F,UAAU,mBAEX,kBAACN,EAAD,CACInF,KAAMsF,EAAWtF,KACjBC,OAAQqF,EAAWrF,OACnBM,OAAQ+E,EAAW/E,OACnBI,OAAQ2E,EAAW3E,c,GAhBb+E,aAgCXC,eAPS,SAAC5C,GAErB,OADA6C,QAAQC,IAAI,oBAAqB9C,GAC1B,CACHhD,YAAY,eAAKgD,EAAMgB,aAAahE,gBAIJ,CAAEgE,gBAA3B4B,CACZN,G,SCnCGS,E,4MAEH7F,OAAS,CACNC,MAAO,iBACPC,YAAY,EACZC,MAAO,CACJF,MAAO,iBACPG,OAAQ,CAAC,EAAG,MAEfC,MAAO,CACJJ,MAAO,iBACPG,OAAQ,CAAC,EAAG,O,EAIlBQ,YAAc,CACXC,KAAM,EACNC,KAAM,G,EAOTgF,MAAQ,SAACC,GACNA,EAAMC,iBACN,EAAKT,MAAMX,S,EA2BdqB,UAAY,SAACF,GACVA,EAAMC,iBACN,IAAMjB,EAAM,CACThE,IAAK,EAAKwE,MAAMxE,IAChBf,OAAQ,EAAKA,OACbY,YAAa,EAAK2E,MAAM3E,aAE3B,EAAK2E,MAAMzB,aAAaiB,I,EAG3BmB,aAAe,SAACH,GACbA,EAAMC,iBACN,IAAMjB,EAAM,CACThE,IAAK,EAAKwE,MAAMxE,IAChBf,OAAQ,EAAKA,OACbY,YAAa,EAAK2E,MAAM3E,aAE3B,EAAK2E,MAAMzB,aAAaiB,I,EAG3BoB,oBAAsB,SAAChC,EAAG4B,GAEvB,IAAIK,EAAM,eAAO,EAAKb,MAAMxE,IAAIoD,IAChCiC,EAAOL,EAAMM,OAAOpF,MAAQ8E,EAAMM,OAAOC,QACzC,EAAKf,MAAMT,OAAOX,EAAGiC,I,kEAxDrBd,KAAKC,MAAMZ,a,+BAQLR,EAAG4B,GACTA,EAAMC,iBACNV,KAAKC,MAAMV,SAASV,K,oCAGTA,EAAG4B,GACd,IAAIK,EAAM,eAAOd,KAAKC,MAAMxE,IAAIoD,IAChCiC,EAAOL,EAAMM,OAAOpF,MAAQ8E,EAAMM,OAAOE,MACzCjB,KAAKC,MAAMT,OAAOX,EAAGiC,K,sCAGRjC,EAAG4B,GAChB,IAAIK,EAAM,eAAOd,KAAKC,MAAMxE,IAAIoD,IAChCiC,EAAOhF,oBAAsBgF,EAAOhF,mBACpCkE,KAAKC,MAAMT,OAAOX,EAAGiC,K,yCAGLjC,EAAG9C,GACnB,IAAI+E,EAAM,eAAOd,KAAKC,MAAMxE,IAAIoD,IAChCiC,EAAOhF,oBAAsBgF,EAAOhF,mBACpCgF,EAAO/E,MAAQA,EAAMmF,IACrBlB,KAAKC,MAAMT,OAAOX,EAAGiC,K,oCA+BT,IAAD,OAEX,OACGd,KAAKC,MAAMxE,IAAI0B,KAAI,SAACvB,EAAIiD,GAAL,OAChB,yBAAKsC,IAAKvF,EAAGF,GAAIwE,UAAU,iBACxB,yBAAKA,UAAU,kBACZ,yBAAKA,UAAU,cAAckB,eAAcxF,EAAGyF,SAAU,sBAAwB,IAC7E,2BAAO1D,KAAK,WAAWhC,KAAK,UAAU0F,SAAUzF,EAAGS,iBAChDiF,QAAS,EAAKT,oBAAoBU,KAAK,EAAM1C,KAChD,kCAGN,yBAAKqB,UAAU,kBACZ,+BACG,mCAGN,yBAAKA,UAAU,kBACZ,+BACG,mCAGN,yBAAKA,UAAU,kBACZ,2BACGvE,KAAK,KACLgC,KAAK,OACL6D,YAAY,UACZC,SAAU,EAAKC,cAAcH,KAAK,EAAM1C,MAI9C,yBAAKqB,UAAU,kBACZ,yBAAKA,UAAU,yBACZ,yBAAKA,UAAU,kBAAf,QACA,2BACGvE,KAAK,OACLgC,KAAK,OACL6D,YAAY,uBACZC,SAAU,EAAKC,cAAcH,KAAK,EAAM1C,OAKjD,yBAAKqB,UAAU,kBACZ,yBACGA,UAAU,iBACVoB,QAAS,EAAKK,gBAAgBJ,KAAK,EAAM1C,IAGzC,yBACGqB,UAAU,gBACV0B,MAAO,CACJC,WAAY,EAAKpG,IAAIoD,GAAG9C,UAIhC,EAAKkE,MAAMxE,IAAIoD,GAAG/C,mBAChB,yBAAKoE,UAAU,WACZ,yBACGA,UAAU,QACVoB,QAAS,EAAKK,gBAAgBJ,KAAK,EAAM1C,KAG5C,kBAAC,gBAAD,CACGhD,MAAM,QACNE,MAAO,EAAKN,IAAIoD,GAAG9C,MACnB0F,SAAU,EAAKK,mBAAmBP,KAAK,EAAM1C,MAGlD,MAGA,IAANA,EACE,yBAAKqB,UAAU,kBACZ,4BACGA,UAAU,iBACVoB,QAAS,EAAKd,OAEd,uBAAGN,UAAU,sBAGhB,yBAAKA,UAAU,gBAGlB,yBAAKA,UAAU,kBACZ,4BACGA,UAAU,iBACVoB,QAAS,EAAKS,SAASR,KAAK,EAAM1C,IAElC,uBAAGqB,UAAU,kC,+BASxB,IAAD,OAKN,OAJAF,KAAKxF,YAAcwF,KAAKC,MAAMzF,YAC9BwF,KAAK1E,YAAe0E,KAAKC,MAAM3E,YAC/B0E,KAAKvE,IAAOuE,KAAKC,MAAMxE,IACvBuE,KAAK1D,UAAY0D,KAAKC,MAAM3D,UAEzB,yBAAK4D,UAAU,yBACZ,yBAAKA,UAAU,cACZ,0BAAMA,UAAU,UAAU8B,SAAUhC,KAAKY,cAGtC,yBAAKV,UAAU,uBACZ,yBAAKA,UAAU,UACZ,yBAAKA,UAAU,oBACZ,6CACA,2BACGvC,KAAK,OACLhC,KAAK,eACL6F,YAAY,cACZC,SAAU,SAACQ,GACR,EAAKvH,OAAOC,MAAQsH,EAAElB,OAAOE,YAO5C,yBAAKf,UAAU,eAEf,yBAAKA,UAAU,iBACZ,yBAAKA,UAAU,kBACZ,4CAEH,yBAAKA,UAAU,kBACZ,yBAAKA,UAAU,YACZ,2BACGvE,KAAK,qBACLgC,KAAK,OACL6D,YAAY,yBACZC,SAAU,SAACQ,GACR,EAAKvH,OAAOG,MAAMF,MACfsH,EAAElB,OAAOE,WAKxB,yBAAKf,UAAU,mBACZ,yBAAKA,UAAU,yBACZ,yBAAKA,UAAU,kBAAf,OACA,2BACGvE,KAAK,mBACLgC,KAAK,OACL8D,SAAU,SAACQ,GACR,EAAK3G,YAAYC,KACd2G,SAASD,EAAElB,OAAOE,QAExBO,YAAY,qBAIrB,yBAAKtB,UAAU,mBACZ,yBAAKA,UAAU,yBACZ,yBAAKA,UAAU,kBAAf,OACA,2BACGvC,KAAK,OACLhC,KAAK,mBACL8F,SAAU,SAACQ,GACR,EAAK3G,YAAYE,KACjB0G,SAASD,EAAElB,OAAOE,QAErBO,YAAY,sBAOxB,yBAAKtB,UAAU,iBACZ,yBAAKA,UAAU,kBACZ,4CAEH,yBAAKA,UAAU,kBACZ,yBAAKA,UAAU,YACZ,2BACGvC,KAAK,OACLhC,KAAK,qBACL6F,YAAY,yBACZC,SAAU,SAACQ,GACR,EAAKvH,OAAOK,MAAMJ,MACfsH,EAAElB,OAAOE,YAQ3B,yBAAKf,UAAU,eAGdF,KAAKmC,cAGN,yBAAKjC,UAAU,iBACZ,yBAAKA,UAAU,UACZ,4BAAQA,UAAU,oCACfoB,QAAStB,KAAKoC,SACd,uBAAGlC,UAAU,oBAFhB,WAMH,yBAAKA,UAAU,SACZ,4BAAQA,UAAU,uCAAuCmB,SAAUrB,KAAKC,MAAM1D,gBAC3E+E,QAAStB,KAAKW,WACd,uBAAGT,UAAU,qBAFhB,YAMH,yBAAKA,UAAU,SACZ,4BAAQvC,KAAK,SAASuC,UAAU,sCAC7B,uBAAGA,UAAU,0BADhB,kB,GA1SHC,aAoUNC,eAXS,SAAC5C,GAGtB,OADA6C,QAAQC,IAAI,gBAAiB9C,GACtB,CACJlC,YAAckC,EAAM6B,SAAS/D,YAC7BG,IAAM+B,EAAM6B,SAAS5D,IACrBa,UAAWkB,EAAM6B,SAAS/C,UAC1BC,gBAAiBiB,EAAM6B,SAAS9C,mBAIE,CACrCiC,eACAa,SF1UqB,WACpB,MAAO,CACH1B,KAAO,cEyUZ2B,MF9TkB,WACjB,MAAO,CACH3B,KAAO,WE6TZ4B,SFzTqB,SAACrB,GACrB,MAAO,CACHP,KAAO,YACPM,QAAU,CACNC,WEsTTsB,OFjTmB,SAACX,EAAGjD,GACtB,MAAO,CACH+B,KAAO,UACPM,QAAU,CACNC,MAAOW,EACPjD,SEuSGwE,CAMZG,GCxTY8B,G,8KAhBP,OACA,6BACI,yBAAKnC,UAAU,YACX,yBAAKA,UAAU,oBAEX,kBAAC,EAAD,MAGA,kBAAC,EAAD,a,GAZFoC,IAAMnC,YCOJoC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCLNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOC,YAAYC,IAC3B,kBAACC,EAAD,QAIJC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.8c29b9d5.chunk.js","sourcesContent":["import { combineReducers} from 'redux';\r\nimport { e } from 'mathjs';\r\nconst math = require('mathjs');\r\n\r\nconst initial = {\r\n   graphicachu : {\r\n      data: [],\r\n      layout: {\r\n         title: \"Title of Graph\",\r\n         showlegend: true,\r\n   \r\n         xaxis: {\r\n            title: \"Name of X-Axis\",\r\n            domain: [0, 1000],\r\n         },\r\n         yaxis: {\r\n            title: \"Name of Y-Axis\",\r\n            domain: [0, 3000],\r\n         },\r\n      },\r\n      config: {\r\n         responsive: true,\r\n         modeBarButtonsToRemove: [\r\n            \"pan2d\",\r\n            \"select2d\",\r\n            \"lasso2d\",\r\n            \"resetScale2d\",\r\n            \"zoomOut2d\",\r\n            \"zoom2d\",\r\n            \"zoomIn2d\",\r\n            \"zoomOut2d\",\r\n            \"autoScale2d\",\r\n         ],\r\n         displaylogo: false,\r\n      },\r\n      frames: [{ scrollZoom: true }]\r\n   },\r\n   calculation: {\r\n      minX: 0,\r\n      maxX: 0,\r\n   },\r\n   fxs: [\r\n      {\r\n         id: 0,\r\n         name: \"\",\r\n         fx: \"\",\r\n         width: \"\",\r\n         displayColorPicker: false,\r\n         color: \"#\" + ((Math.random() * 0xffffff) << 0).toString(16),\r\n         visible: true,\r\n         compare: false,\r\n         checkBoxDisabled: false,\r\n      },\r\n   ],\r\n   counterId: 0,\r\n   compareDisabled: true,\r\n\r\n}\r\n\r\nconst calculateTrace = (calculation, string_fx) => {\r\n\r\n   const node = math.parse(string_fx);\r\n   const expr = node.compile();\r\n\r\n  \r\n   // evaluate the expression repeatedly for different values of x\r\n   // console.log(calculation);\r\n   // const min = 0;\r\n   // 백만 https://mathjs.org/docs/reference/functions/range.html\r\n   const step  = Math.abs(calculation.maxX - calculation.minX)/100000;\r\n   // console.log(calculation.minX, calculation.maxX, step);\r\n   // console.log(math.range(calculation.minX, calculation.maxX, step));\r\n   const xValues = math.range(calculation.minX, calculation.maxX, step).toArray();\r\n   const yValues = xValues.map(function (x1) {\r\n      // console.log(x);\r\n     return expr.evaluate({x: x1})\r\n   });\r\n\r\n   // console.log(xValues, yValues);\r\n\r\n   return [xValues, yValues];\r\n}\r\n\r\nconst graphicachuReducer = (state = initial , action) => {\r\n   \r\n   switch(action.type){\r\n      case \"SUBMIT_FX_CONFIG\" :\r\n         const stateCopy = {...state}\r\n         let traces = [], selectOptions = []; \r\n         // console.log(stateCopy.fxs);\r\n         action.payload.fxs.forEach((fx_data, i) => {\r\n            if(fx_data.fx){\r\n               \r\n               let [x_trace, y_trace] = calculateTrace(action.payload.calculation, fx_data.fx);\r\n               let trace = {\r\n                  name: fx_data.name,\r\n                  x: x_trace,\r\n                  y: y_trace,\r\n                  type: \"scatter\",\r\n                  marker: { color: fx_data.color },\r\n                  visible: fx_data.visible,\r\n                  // showlegend: true,\r\n                  // mode: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\r\n                  \r\n               };\r\n               traces.push(trace);\r\n   \r\n            }\r\n   \r\n            //Add select option\r\n            selectOptions.push({\r\n               index: i,\r\n               name: fx_data.name? fx_data.name : `Expression ${i+1}`\r\n            });\r\n         })\r\n\r\n         // Calcuation.\r\n\r\n         return Object.assign({}, state, {\r\n            graphicachu: {\r\n               ...(stateCopy.graphicachu),\r\n               data: traces,\r\n               legendOptions : selectOptions,\r\n               initialSelect : 0,\r\n               layout: action.payload.layout\r\n            }\r\n         });\r\n      default: \r\n         return state;\r\n   \r\n   }\r\n}\r\n   \r\n\r\nconst fxFormReducer = (state = initial , action) => {\r\n   let fxsCopy = [...state.fxs];\r\n   switch(action.type){\r\n      case \"ADD_FX\" :\r\n         \r\n         let cId = state.counterId + 1;\r\n         fxsCopy.push({\r\n            id: cId,\r\n            name: \"\",\r\n            fx: \"\",\r\n            width: \"\",\r\n            displayColorPicker: false,\r\n            color: \"#\" + ((Math.random() * 0xffffff) << 0).toString(16),\r\n            visible: true,\r\n            compare: false,\r\n            checkBoxDisabled: false,\r\n         });\r\n         \r\n         return Object.assign({}, state, {\r\n            fxs: fxsCopy,\r\n            counterId: cId\r\n         });\r\n      case \"REMOVE_FX\" :\r\n         fxsCopy.splice(action.payload.index, 1)\r\n         \r\n         return Object.assign({}, state, {\r\n            fxs: fxsCopy\r\n         });\r\n            \r\n      case \"Edit_FX\" :\r\n         fxsCopy[action.payload.index] = action.payload.fx;\r\n\r\n         const numOfChecked = fxsCopy.reduce((numOfCompare, fx) => {\r\n            return numOfCompare + (fx.compare ? 1 : 0);\r\n         }, 0);\r\n\r\n         fxsCopy.forEach(fx => {\r\n            if( numOfChecked > 1){\r\n               if(!fx.compare)\r\n                  fx.checkBoxDisabled = true;\r\n            } else {\r\n               fx.checkBoxDisabled = false;\r\n            }\r\n         });\r\n\r\n         return Object.assign({}, state, {\r\n            fxs: fxsCopy,\r\n            compareDisabled: (numOfChecked < 2),\r\n         });\r\n      case \"FETCH_FXS\" :\r\n         return state;\r\n      default: \r\n         return state;\r\n   \r\n   }\r\n   \r\n}\r\n\r\nexport default combineReducers({\r\n   submitFxForm: graphicachuReducer,\r\n   fetchFxs: fxFormReducer,\r\n   addFx: fxFormReducer,\r\n   removeFx: fxFormReducer,\r\n   editFx: fxFormReducer\r\n});\r\n","\r\n// Graph Name\r\n\r\nexport const fetchFxs = () => {\r\n    return {\r\n        type : 'FETCH_FXS'\r\n    }\r\n}\r\n\r\nexport const submitFxForm = (ctx) => {\r\n    return {\r\n        type : 'SUBMIT_FX_CONFIG',\r\n        payload : ctx\r\n    }\r\n}\r\n\r\nexport const addFx = () => {\r\n    return {\r\n        type : 'ADD_FX'\r\n    }\r\n}\r\n\r\nexport const removeFx = (index) => {\r\n    return {\r\n        type : 'REMOVE_FX',\r\n        payload : {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\nexport const editFx = (i, fx) => {\r\n    return {\r\n        type : 'Edit_FX',\r\n        payload : {\r\n            index: i,\r\n            fx\r\n        }\r\n    }\r\n}\r\n\r\n// export const editFx = (i, fx) => {\r\n//     return {\r\n//         type : 'Edit_FX',\r\n//         payload : {\r\n//             index: i,\r\n//             fx\r\n//         }\r\n//     }\r\n// }\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { submitFxForm } from '../actions';\r\n\r\n\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nconst Plotly = window.Plotly;\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nclass Graphicachu extends Component {\r\n    \r\n    // componentDidMount() {\r\n    //     this.props.fetchFxs();\r\n    // }\r\n\r\n    render() {\r\n        // console.log(this.props.graphicachu);\r\n        const graphicahu = {...this.props.graphicachu};\r\n        return (\r\n            <div className=\"column plot-box\">\r\n                \r\n                <Plot\r\n                    data={graphicahu.data}\r\n                    layout={graphicahu.layout}\r\n                    config={graphicahu.config}\r\n                    frames={graphicahu.frames}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// get copy of a state and do something. usually 'mapstatetoprops'\r\n// alllll of the state in the store\r\nconst mapStateToProps = (state) => {\r\n    console.log(\"Gaphicachu state:\", state);\r\n    return {\r\n        graphicachu: {...state.submitFxForm.graphicachu},\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, { submitFxForm\r\n})(Graphicachu);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { submitFxForm, fetchFxs, addFx, removeFx, editFx} from \"../actions\";\r\nimport { TwitterPicker } from \"react-color\";\r\nimport { Form, Checkbox } from 'semantic-ui-react';\r\n\r\n// import { Checkbox } from 'semantic-ui-react'\r\nclass FxForm extends Component {\r\n   \r\n   layout = {\r\n      title: \"Title of Graph\",\r\n      showlegend: true,\r\n      xaxis: {\r\n         title: \"Name of X-Axis\",\r\n         domain: [0, 1000],\r\n      },\r\n      yaxis: {\r\n         title: \"Name of Y-Axis\",\r\n         domain: [0, 3000],\r\n      },\r\n   }\r\n\r\n   calculation = {\r\n      minX: 0,\r\n      maxX: 0,\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.props.fetchFxs();\r\n   }\r\n   \r\n   onAdd = (event) => {\r\n      event.preventDefault();\r\n      this.props.addFx();\r\n   };\r\n\r\n   onRemove(i, event) {\r\n      event.preventDefault();\r\n      this.props.removeFx(i);\r\n   }\r\n\r\n   onFxChangeGen(i, event){\r\n      let fxCopy = {...this.props.fxs[i]};\r\n      fxCopy[event.target.name] = event.target.value;\r\n      this.props.editFx(i, fxCopy);\r\n   }\r\n\r\n   onFxColor_Click(i, event) {\r\n      let fxCopy = {...this.props.fxs[i]};\r\n      fxCopy.displayColorPicker = !fxCopy.displayColorPicker;\r\n      this.props.editFx(i, fxCopy);\r\n   }\r\n\r\n   onFxColor_Selected(i, color) {\r\n      let fxCopy = {...this.props.fxs[i]};\r\n      fxCopy.displayColorPicker = !fxCopy.displayColorPicker;\r\n      fxCopy.color = color.hex;\r\n      this.props.editFx(i, fxCopy);\r\n   }\r\n\r\n   onCompare = (event) => {\r\n      event.preventDefault();\r\n      const ctx = {\r\n         fxs: this.props.fxs,\r\n         layout: this.layout,\r\n         calculation: this.props.calculation\r\n      }\r\n      this.props.submitFxForm(ctx);\r\n   };\r\n\r\n   onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n      const ctx = {\r\n         fxs: this.props.fxs,\r\n         layout: this.layout,\r\n         calculation: this.props.calculation\r\n      }\r\n      this.props.submitFxForm(ctx);\r\n   };\r\n\r\n   handleCheckboxClick = (i, event) =>{\r\n      // console.log(i, event.target.checked);\r\n      let fxCopy = {...this.props.fxs[i]};\r\n      fxCopy[event.target.name] = event.target.checked;\r\n      this.props.editFx(i, fxCopy)\r\n   } \r\n\r\n\r\n   fetchFxList() {\r\n      // console.log(this.fxs);\r\n      return (\r\n         this.props.fxs.map((fx, i) => (\r\n            <div key={fx.id} className=\"inline fields\">\r\n               <div className=\"one wide field\">\r\n                  <div className=\"ui checkbox\" data-content={fx.disabled? \"Deselect checkboxes\" : \"\"}>\r\n                     <input type=\"checkbox\" name=\"compare\" disabled={fx.checkBoxDisabled}\r\n                        onClick={this.handleCheckboxClick.bind(this, i)}/>\r\n                     <label></label>\r\n                  </div>\r\n               </div>\r\n               <div className=\"one wide field\">\r\n                  <label>\r\n                     <h4>Y</h4>\r\n                  </label>\r\n               </div>\r\n               <div className=\"one wide field\">\r\n                  <label>\r\n                     <h3>=</h3>\r\n                  </label>\r\n               </div>\r\n               <div className=\"six wide field\">\r\n                  <input\r\n                     name=\"fx\"\r\n                     type=\"text\"\r\n                     placeholder=\"ax+b...\"\r\n                     onChange={this.onFxChangeGen.bind(this, i)}\r\n                  />\r\n               </div>\r\n\r\n               <div className=\"six wide field\">\r\n                  <div className=\"ui left labeled input\">\r\n                     <div className=\"ui basic label\">Name</div>\r\n                     <input\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        placeholder=\"Name of the equation\"\r\n                        onChange={this.onFxChangeGen.bind(this, i)}\r\n                     />\r\n                  </div>\r\n               </div>\r\n\r\n               <div className=\"one wide field\">\r\n                  <div\r\n                     className=\"ui icon button\"\r\n                     onClick={this.onFxColor_Click.bind(this, i)}\r\n                  >\r\n                     {/* <i class=\"tint icon\"></i> */}\r\n                     <div\r\n                        className=\"default-color\"\r\n                        style={{\r\n                           background: this.fxs[i].color,\r\n                        }}\r\n                     />\r\n                  </div>\r\n                  {this.props.fxs[i].displayColorPicker ? (\r\n                     <div className=\"popover\">\r\n                        <div\r\n                           className=\"cover\"\r\n                           onClick={this.onFxColor_Click.bind(this, i)}\r\n                        />\r\n                        {/* <SketchPicker color={ this.state.fxs[i].color } onChange={ this.onFxColor_Selected.bind(this, i)} /> */}\r\n                        <TwitterPicker\r\n                           width=\"290px\"\r\n                           color={this.fxs[i].color}\r\n                           onChange={this.onFxColor_Selected.bind(this, i )}\r\n                        />\r\n                     </div>\r\n                  ) : null}\r\n               </div>\r\n\r\n               {i === 0 ? (\r\n                  <div className=\"one wide field\">\r\n                     <button\r\n                        className=\"ui icon button\"\r\n                        onClick={this.onAdd}\r\n                     >\r\n                        <i className=\"plus circle icon\"></i>\r\n                     </button>\r\n\r\n                     <div className=\"ui divider\"></div>\r\n                  </div>\r\n               ) : (\r\n                  <div className=\"one wide field\">\r\n                     <button\r\n                        className=\"ui icon button\"\r\n                        onClick={this.onRemove.bind(this, i)}\r\n                     >\r\n                        <i className=\"minus red circle icon\"></i>\r\n                     </button>\r\n                  </div>\r\n               )}\r\n            </div>\r\n         ))\r\n      );\r\n   }\r\n\r\n   render() {\r\n      this.graphicachu = this.props.graphicachu;\r\n      this.calculation  = this.props.calculation ;\r\n      this.fxs  = this.props.fxs;\r\n      this.counterId = this.props.counterId;\r\n      return (\r\n         <div className=\"column config-pad-box\">\r\n            <div className=\"ui segment\">\r\n               <form className=\"ui form\" onSubmit={this.onFormSubmit}>\r\n                  {/*  Names */}\r\n                  {/* TODO: change the grid ? */}\r\n                  <div className=\"ui equal width form\">\r\n                     <div className=\"fields\">\r\n                        <div className=\"eight wide field\">\r\n                           <label>Graph Name</label>\r\n                           <input\r\n                              type=\"text\"\r\n                              name=\"layout.title\"\r\n                              placeholder=\"Graph Title\"\r\n                              onChange={(e) => {\r\n                                 this.layout.title = e.target.value;\r\n                              }}\r\n                           />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n\r\n                  <div className=\"ui divider\"></div>\r\n\r\n                  <div className=\"inline fields\">\r\n                     <div className=\"two wide field\">\r\n                        <label>X-Axis :</label>\r\n                     </div>\r\n                     <div className=\"six wide field\">\r\n                        <div className=\"ui input\">\r\n                           <input\r\n                              name=\"layout.xaxis.title\"\r\n                              type=\"text\"\r\n                              placeholder=\"Define title of X-Axis\"\r\n                              onChange={(e) => {\r\n                                 this.layout.xaxis.title =\r\n                                    e.target.value;\r\n                              }}\r\n                           />\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"four wide field\">\r\n                        <div className=\"ui left labeled input\">\r\n                           <div className=\"ui basic label\">Min</div>\r\n                           <input\r\n                              name=\"calculation.minX\"\r\n                              type=\"text\"\r\n                              onChange={(e) => {\r\n                                 this.calculation.minX =\r\n                                    parseInt(e.target.value);\r\n                              }}\r\n                              placeholder=\"Enter Min X.. \"\r\n                           />\r\n                        </div>\r\n                     </div>\r\n                     <div className=\"four wide field\">\r\n                        <div className=\"ui left labeled input\">\r\n                           <div className=\"ui basic label\">Max</div>\r\n                           <input\r\n                              type=\"text\"\r\n                              name=\"calculation.maxX\"\r\n                              onChange={(e) => {\r\n                                 this.calculation.maxX =\r\n                                 parseInt(e.target.value);\r\n                              }}\r\n                              placeholder=\"Enter Max X.. \"\r\n                           />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n\r\n                  {/* Y Range  */}\r\n                  <div className=\"inline fields\">\r\n                     <div className=\"two wide field\">\r\n                        <label>Y-Axis :</label>\r\n                     </div>\r\n                     <div className=\"six wide field\">\r\n                        <div className=\"ui input\">\r\n                           <input\r\n                              type=\"text\"\r\n                              name=\"layout.yaxis.title\"\r\n                              placeholder=\"Define title of Y-Axis\"\r\n                              onChange={(e) => {\r\n                                 this.layout.yaxis.title =\r\n                                    e.target.value;\r\n                              }}\r\n                           />\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n\r\n                  {/* Y = AX + B Functions   */}\r\n                  <div className=\"ui divider\"></div>\r\n\r\n                  {/* Dynamic Functions */}\r\n                  {this.fetchFxList()}\r\n                              \r\n\r\n                  <div className=\"inline fields\">\r\n                     <div className=\"field \">\r\n                        <button className=\"ui right labeled blue icon button\"\r\n                           onClick={this.onReset}>\r\n                           <i className=\"right undo icon\"></i>\r\n                           RESET?\r\n                        </button>\r\n                     </div>\r\n                     <div className=\"field\">\r\n                        <button className=\"ui right labeled yellow icon button \" disabled={this.props.compareDisabled}\r\n                           onClick={this.onCompare}>\r\n                           <i className=\"right clone icon\"></i>\r\n                           Compare\r\n                        </button>\r\n                     </div>\r\n                     <div className=\"field\">\r\n                        <button type=\"submit\" className=\"ui right labeled pink icon button \">\r\n                           <i className=\"right chart line icon\"></i>\r\n                           PLOT!\r\n                        </button>\r\n                     </div>\r\n                  </div>\r\n               </form>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\n// get copy of a state and do something. usually 'mapstatetoprops'\r\n// alllll of the state in the store\r\nconst mapStateToProps = (state) => {\r\n   \r\n   console.log(\"FxForm state:\", state);\r\n   return {\r\n      calculation : state.fetchFxs.calculation,\r\n      fxs : state.fetchFxs.fxs,\r\n      counterId: state.fetchFxs.counterId,\r\n      compareDisabled: state.fetchFxs.compareDisabled,\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n   submitFxForm,\r\n   fetchFxs,\r\n   addFx,\r\n   removeFx,\r\n   editFx\r\n})(FxForm);\r\n","import React from \"react\";\r\nimport Graphicachu from './components/Graphicachu';\r\nimport FxForm from './components/FxForm';\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  \r\n   render() {\r\n\r\n        return (\r\n        <div>\r\n            <div className=\"app-main\">\r\n                <div className=\"ui centered grid\">\r\n                    {/* Plot */}\r\n                    <Graphicachu />\r\n\r\n                    {/* Config Pad */}\r\n                    <FxForm />\r\n                </div>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport reducers from './reducers';\r\n\r\nimport AppRedux from './AppRedux';\r\n// import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={createStore(reducers)} >\r\n      <AppRedux />    \r\n    </Provider>\r\n  </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n {/* <Provider store={createStore(reducers)} >\r\n      <AppRedux />    \r\n    </Provider>, \r\n<App />*/}"],"sourceRoot":""}