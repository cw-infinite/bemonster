{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Plotly","window","Plot","createPlotlyComponent","App","state","x","y","minX","maxX","minY","maxY","data","type","marker","color","layout","title","config","responsive","onFormSubmit","event","preventDefault","data1","obj","i","push","setState","this","className","onSubmit","class","onChange","e","target","value","placeholder","disabled","tabindex","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPAIMA,EAASC,OAAOD,OAChBE,EAAOC,IAAsBH,GAoKpBI,E,4MAhKdC,MAAQ,CACPC,EAAI,GACJC,EAAI,GACJC,KAAO,EACPC,KAAO,IACPC,KAAO,EACPC,KAAO,IAKPC,KAAK,CACJ,CACCN,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,GAChBC,EAAG,CAAC,EAAG,EAAG,EAAG,GAAI,IACjBM,KAAM,UACNC,OAAQ,CAACC,MAAO,SAGlBC,OAAQ,CACPC,MAAO,6BAERC,OAAS,CACRC,YAAY,I,EASdC,aAAe,SAAAC,GACdA,EAAMC,iBASN,IAPA,IAAIC,EAAQ,GACRjB,EAAI,GACJC,EAAI,GACJiB,EAAM,CACTX,KAAM,UACNC,OAAQ,CAACC,MAAO,QAETU,GAAK,EAAKpB,MAAMG,KAAMiB,IAAM,EAAKpB,MAAMI,KAAMgB,IACpDnB,EAAEoB,KAAKD,GACPlB,EAAEmB,KAAKD,EAAEA,GAEVD,EAAIlB,EAAIA,EACRkB,EAAIjB,EAAIA,EACRgB,EAAMG,KAAKF,GACX,EAAKG,SAAS,CAACf,KAAMW,K,4DArBRF,GACbO,KAAKD,SAAS,M,+BAwBJ,IAAD,OACR,OACD,6BACC,yBAAKE,UAAU,YACd,yBAAKA,UAAU,yCACd,yBAAKA,UAAU,kBACd,kBAAC3B,EAAD,CACCU,KAAMgB,KAAKvB,MAAMO,KACjBI,OAAQY,KAAKvB,MAAMW,OACnBE,OAAQU,KAAKvB,MAAMa,UAIrB,yBAAKW,UAAU,kBACd,yBAAKA,UAAU,cACd,0BAAMC,SAAUF,KAAKR,aAAcS,UAAU,WAO5C,yBAAKA,UAAU,iBACd,yBAAKA,UAAU,oBACd,6CAED,yBAAKA,UAAU,oBACd,yBAAKE,MAAM,yBAEV,yBAAKA,MAAM,kBAAX,SACA,2BAAOlB,KAAK,OAAOmB,SAAU,SAAAC,GAAC,OAAI,EAAKN,SAAS,CAAEnB,KAAOyB,EAAEC,OAAOC,SAClEA,MAAOP,KAAKvB,MAAMG,KAAM4B,YAAY,qBAGtC,yBAAKP,UAAU,oBACd,yBAAKE,MAAM,yBAEV,yBAAKA,MAAM,kBAAX,SAGA,2BAAOlB,KAAK,OACZsB,MAASP,KAAKvB,MAAMI,KACpBuB,SAAU,SAAAC,GAAC,OAAI,EAAKN,SAAS,CAAElB,KAAOwB,EAAEC,OAAOC,SAC/CC,YAAY,sBA+Bf,yBAAKP,UAAU,iBACd,yBAAKA,UAAU,qBACd,kDACA,2BAAOhB,KAAK,OAAOsB,MAAM,UAAUE,UAAQ,MAI7C,yBAAKR,UAAU,gBACd,yBAAKA,UAAU,sBACd,2BAAOhB,KAAK,WAAWyB,SAAS,IAAIT,UAAU,WAC9C,4CAIF,yBAAKA,UAAU,cACd,4BAAQA,UAAU,aAAlB,SACA,yBAAKA,UAAU,OACf,4BAAQA,UAAU,0BAA0BhB,KAAK,UAAjD,mB,GAlJS0B,IAAMC,WCKJC,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.46a9c871.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nconst Plotly = window.Plotly;\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nclass App extends React.Component {\r\n\r\n\tstate = {\r\n\t\tx : [],\r\n\t\ty : [],\r\n\t\tminX : 0,\r\n\t\tmaxX : 100,\r\n\t\tminY : 0,\r\n\t\tmaxY : 100,\r\n\r\n\t\t/*\r\n\t\tconfig\r\n\t\t*/\r\n\t\tdata:[\r\n\t\t\t{\r\n\t\t\t\tx: [1, 2, 3, 4, 5],\r\n\t\t\t\ty: [1, 4, 9, 16, 25],\r\n\t\t\t\ttype: 'scatter',\r\n\t\t\t\tmarker: {color: 'red'}\r\n\t\t\t}\r\n\t\t],\r\n\t\tlayout: {\r\n\t\t\ttitle: 'Polilot Application Graph'\r\n\t\t},\r\n\t\tconfig : {\r\n\t\t\tresponsive: true\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tonInputChange(event) {\r\n\t\tthis.setState({ })\r\n\t}\r\n\r\n\tonFormSubmit = event => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tlet data1 = [];\r\n\t\tlet x = [];\r\n\t\tlet y = [];\r\n\t\tlet obj = {\r\n\t\t\ttype: 'scatter',\r\n\t\t\tmarker: {color: 'red'}\r\n\t\t}\r\n\t\tfor(let i = +this.state.minX; i <= +this.state.maxX; i++){\r\n\t\t\tx.push(i);\r\n\t\t\ty.push(i*i);\r\n\t\t}\r\n\t\tobj.x = x;\r\n\t\tobj.y = y;\r\n\t\tdata1.push(obj);\r\n\t\tthis.setState({data: data1});\r\n\r\n\t}\r\n\r\n  \trender(){\r\n\t \treturn  (\r\n\t\t<div>\r\n\t\t\t<div className=\"app-main\">\r\n\t\t\t\t<div className=\"ui stackable two column centered grid\">\r\n\t\t\t\t\t<div className=\"column app-box\">\r\n\t\t\t\t\t\t<Plot\r\n\t\t\t\t\t\t\tdata={this.state.data}\r\n\t\t\t\t\t\t\tlayout={this.state.layout}\r\n\t\t\t\t\t\t\tconfig={this.state.config}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"column app-box\">\r\n\t\t\t\t\t\t<div className=\"ui segment\">\r\n\t\t\t\t\t\t\t<form onSubmit={this.onFormSubmit} className=\"ui form\">\r\n\t\t\t\t\t\t\t\t{/* <div className=\"field\">\r\n\t\t\t\t\t\t\t\t\t<label>Search</label>\r\n\t\t\t\t\t\t\t\t\t<input type=\"text\" onChange={this.onInputChange}></input> \r\n\r\n\t\t\t\t\t\t\t\t</div> */}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<div className=\"inline fields\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"three wide field\">\r\n\t\t\t\t\t\t\t\t\t\t<label>X Range :</label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"seven wide field\">\r\n\t\t\t\t\t\t\t\t\t\t<div class=\"ui left labeled input\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"ui basic label\">X min</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" onChange={e => this.setState({ minX : e.target.value})} \r\n\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.minX} placeholder=\"Enter Min X.. \" />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"seven wide field\">\r\n\t\t\t\t\t\t\t\t\t\t<div class=\"ui left labeled input\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"ui basic label\">\r\n\t\t\t\t\t\t\t\t\t\t\t\tX min\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\tvalue = {this.state.maxX}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={e => this.setState({ maxX : e.target.value})} \r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter Max Y.. \" />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t{/* <div className=\"inline fields\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"three wide field\">\r\n\t\t\t\t\t\t\t\t\t\t<label>Y Range :</label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"seven wide field\">\r\n\t\t\t\t\t\t\t\t\t\t<div class=\"ui left labeled input\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"ui basic label\">Y min</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\tonChange={e => this.setState({ minY : e.target.value})} \r\n\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.minY}\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter Min Y.. \" />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"seven wide field\">\r\n\t\t\t\t\t\t\t\t\t\t<div class=\"ui left labeled input\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"ui basic label\">Y max</div>\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"text\" \r\n\t\t\t\t\t\t\t\t\t\t\tonChange={e => this.setState({ maxY : e.target.value})} \r\n\t\t\t\t\t\t\t\t\t\t\tvalue = {this.state.maxY}\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter Max Y.. \" />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div> */}\r\n\r\n\t\t\t\t\t\t\t\t<div className=\"inline fields\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"twelve wide field\">\r\n\t\t\t\t\t\t\t\t\t\t<label>Static Function</label>\r\n\t\t\t\t\t\t\t\t\t\t<input type=\"text\" value=\"Y = X^2\" disabled />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<div className=\"inline field\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"ui toggle checkbox\">\r\n\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" tabindex=\"0\" className=\"hidden\" />\r\n\t\t\t\t\t\t\t\t\t\t<label>options</label>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<div className=\"ui buttons\">\r\n\t\t\t\t\t\t\t\t\t<button className=\"ui button\">reset</button>\r\n\t\t\t\t\t\t\t\t\t<div className=\"or\"></div>\r\n\t\t\t\t\t\t\t\t\t<button className=\"ui orange button active\" type=\"submit\" >Save</button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\r\n\t\t\t</div>\r\n\t\t\r\n\t\t</div>\r\n\t  );\r\n  } \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}