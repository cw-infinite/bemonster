{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Plotly","window","Plot","createPlotlyComponent","math","require","App","state","counter","expressions","x","y","minX","maxX","minY","maxY","gridOption","displayColorPicker","graphName","yAxis","xAxis","initialSelect","legendOptions","fxs","fx1","fx1Name","data","type","marker","color","name","visible","layout","title","showlegend","xaxis","domain","yaxis","config","responsive","modeBarButtonsToRemove","displaylogo","frames","scrollZoom","baseState","init_plotty","onAdd","event","preventDefault","setState","id","fx","width","Math","random","toString","onSelectChange","console","log","target","value","index","parseInt","slice","map","trace","i","calculation","string_fx","expr","parse","compile","step","abs","xValues","range","toArray","yValues","x1","evaluate","onReset","onFormSubmit","traces","selectOptions","fx_list","fx_data","x_trace","y_trace","push","this","splice","hex","className","onSubmit","onChange","onHandleChange","placeholder","e","data-tooltip","data-inverted","data-variation","data-position","data-title","onClick","key","onFxChange","bind","onFxNameChange","handleColorPick_Click","style","background","handleColorPick_Close","handleColorPick_Selected","onRemove","multiple","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc7647eb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport { SketchPicker, TwitterPicker } from 'react-color';\r\n// import FxForm from './Components/FxForm'\r\n\r\n// import {\r\n//    evaluate\r\n//    // atan2, chain, derivative, e, log, pi, pow, round, sqrt\r\n//  } from 'mathjs';\r\n\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nconst Plotly = window.Plotly;\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nconst math = require('mathjs');\r\n\r\n\r\nclass App extends React.Component {\r\n   state = {\r\n\r\n      counter: 1,\r\n      expressions : [],\r\n\r\n      // configable parts\r\n      x: [],\r\n      y: [],\r\n      minX: 0,\r\n      maxX: 1000,\r\n      minY: -1000,\r\n\t\tmaxY: 1000,\r\n      gridOption: false,\r\n      \r\n      displayColorPicker: false,\r\n      \r\n      graphName: \"\",\r\n      yAxis: \"\",\r\n      xAxis: \"\",\r\n\r\n      initialSelect: 0,\r\n      legendOptions: [],\r\n      fxs: [],\r\n\r\n      fx1: \"\",\r\n      fx1Name: '',\r\n\r\n      /*\r\n\t\tconfig\r\n\t\t*/\r\n      data: [\r\n         // called trace.\r\n         {\r\n            x: [-50, -60, 1, 2, 3, 4, 5, 6],\r\n            y: [1, 4, 9, 16, 25, 100, 2000],\r\n            type: \"scatter\",\r\n            marker: { color: \"#1f77b4\" },\r\n            name: \"Red Trace\",\r\n         },\r\n         {\r\n            x: [0, 0],\r\n            y: [0, 1000],\r\n            type: \"scatter\",\r\n            marker: { color: \"green\" },\r\n            name: \"Red Trace\",\r\n            visible: false,\r\n         },\r\n\r\n      ],\r\n      layout: {\r\n         title: \"Title of Graph\",\r\n         showlegend: true,\r\n\r\n         xaxis: {\r\n            title: \"Name of X-Axis\",\r\n            domain: [0, 1000]\r\n            \r\n         },\r\n         yaxis: {\r\n            title: \"Name of Y-Axis\",\r\n            domain: [0, 3000]\r\n         },\r\n      },\r\n      config: {\r\n         responsive: true,\r\n         modeBarButtonsToRemove: [\r\n            \"pan2d\",\r\n            \"select2d\",\r\n            \"lasso2d\",\r\n            \"resetScale2d\",\r\n            \"zoomOut2d\",\r\n            \"zoom2d\",\r\n            \"zoomIn2d\",\r\n            \"zoomOut2d\",\r\n            \"autoScale2d\",\r\n         ],\r\n         displaylogo: false,\r\n      },\r\n      frames: [{ scrollZoom: true }],\r\n   };\r\n\r\n   baseState = this.state;\r\n\r\n   init_plotty = () => {\r\n\r\n   }\r\n\r\n   onAdd = (event) => {\r\n      event.preventDefault();\r\n\r\n      this.setState({\r\n         fxs: [...this.state.fxs, {\r\n            id: this.state.counter,\r\n            name: '',\r\n            fx: '',\r\n            width: '',\r\n            \r\n            displayColorPicker: false,\r\n            color: '#'+(Math.random()*0xFFFFFF<<0).toString(16),\r\n            visible: true,\r\n            \r\n\r\n         }],\r\n         counter : ++this.state.counter\r\n      });\r\n\r\n\r\n   };\r\n\r\n   onRemove(i, event) {\r\n      console.log(i);\r\n      let fxs = [...this.state.fxs]\r\n      fxs.splice(i, 1);\r\n      this.setState({ fxs });\r\n   }\r\n\r\n   onFxChange(i, event) {\r\n      let fxs = [...this.state.fxs];\r\n      fxs[i].fx = event.target.value;\r\n      this.setState({ fxs });\r\n   }   \r\n\r\n   onFxNameChange(i, event) {\r\n      let fxs = [...this.state.fxs];\r\n      fxs[i].name = event.target.value;\r\n      this.setState({ fxs });\r\n   }   \r\n\r\n   handleColorPick_Click(i, event) {\r\n      console.log(event.target.value)\r\n      let fxs = [...this.state.fxs];\r\n      fxs[i].displayColorPicker = !fxs[i].displayColorPicker;\r\n      this.setState({ fxs });\r\n    };\r\n  \r\n   handleColorPick_Close(i, event) {\r\n      let fxs = [...this.state.fxs];\r\n      fxs[i].displayColorPicker = !fxs[i].displayColorPicker;\r\n      this.setState({ fxs });\r\n   };\r\n   \r\n   handleColorPick_Selected(i, color) {\r\n      let fxs = [...this.state.fxs];\r\n      fxs[i].displayColorPicker = !fxs[i].displayColorPicker;\r\n      fxs[i].color = color.hex;\r\n      this.setState({ fxs });\r\n\r\n   };\r\n\r\n   onSelectChange = (event) => {\r\n      console.log(event.target.value);\r\n      const index = parseInt(event.target.value);\r\n      let data = this.state.data.slice();\r\n      if(index > 0){\r\n         data.map((trace, i) => {\r\n            // visible none.\r\n            // console.log(i, index);\r\n            if(i !== index-1){\r\n               trace.visible = false;\r\n            }\r\n            else{\r\n               trace.visible = trace.visible || true;\r\n            }\r\n         });\r\n\r\n      } else {\r\n         data.map((trace, i) => {\r\n            trace.visible = true;\r\n         });\r\n      }\r\n      this.setState({ \r\n         data: data,\r\n         initialSelect: index \r\n      });\r\n   }\r\n\r\n   calculation = (string_fx) => {\r\n\r\n      const node = math.parse(string_fx);\r\n      const expr = node.compile();\r\n\r\n     \r\n      // evaluate the expression repeatedly for different values of x\r\n\r\n      // const min = 0;\r\n      // 백만 https://mathjs.org/docs/reference/functions/range.html\r\n      const step  = Math.abs(this.state.maxX - this.state.minX)/100000;\r\n\r\n      \r\n      const xValues = math.range(this.state.minX, this.state.maxX, step).toArray();\r\n      const yValues = xValues.map(function (x1) {\r\n         // console.log(x);\r\n        return expr.evaluate({x: x1})\r\n      });\r\n\r\n      // console.log(xValues, yValues);\r\n\r\n      return [xValues, yValues];\r\n   }\r\n\r\n   onReset = (event) => {\r\n      event.preventDefault();\r\n   };\r\n\r\n   onFormSubmit = (event) => {\r\n      event.preventDefault();\r\n      // console.log(this.state);\r\n\r\n      let traces = [], selectOptions = []; \r\n\r\n      let layout = {\r\n         xaxis: {\r\n            title: this.state.xAxis,\r\n         },\r\n         yaxis: {\r\n            title: this.state.yAxis,\r\n         },\r\n         title: this.state.graphName,\r\n         // showlegend: this.state.gridOption,\r\n         showlegend: true,\r\n      };\r\n\r\n      let fx_list = this.state.fxs.slice();\r\n\r\n      //temporary\r\n      fx_list = [{\r\n         id: 1,\r\n         name: this.state.fx1Name,\r\n         fx: this.state.fx1,\r\n         color: '',\r\n         // style: '',\r\n         width: '',\r\n         visible: true\r\n      }, ...fx_list];\r\n\r\n      fx_list.map((fx_data, i) => {\r\n         if(fx_data.fx){\r\n            let [x_trace, y_trace] = this.calculation(fx_data.fx);\r\n            let trace = {\r\n               name: fx_data.name,\r\n               x: x_trace,\r\n               y: y_trace,\r\n               type: \"scatter\",\r\n               marker: { color: fx_data.color },\r\n               visible: fx_data.visible,\r\n               // showlegend: true,\r\n               // mode: \"lines\", \"markers\", \"lines+markers\", \"lines+markers+text\", \"none\"\r\n               \r\n            };\r\n            traces.push(trace);\r\n\r\n            \r\n\r\n         }\r\n\r\n         //Add select option\r\n         selectOptions.push({\r\n            index: i,\r\n            name: fx_data.name? fx_data.name : `Expression ${i+1}`\r\n         });\r\n      })\r\n      \r\n      console.log(selectOptions);\r\n\r\n      this.setState({\r\n         data: traces,\r\n         layout: layout,\r\n         legendOptions : selectOptions,\r\n         initialSelect : 0,\r\n      });\r\n\r\n      \r\n   };\r\n   \r\n   render() {\r\n\r\n      const tooltip = `Basic operations\\n\r\n\r\n      y = 0.034x + 13 * (3/2) -4\r\n      Exponential\r\n      \r\n      y = x^3\r\n      y = exp(x)\r\n      Radical expression\r\n      \r\n      y = sqrt(x)\r\n      y = x^(1/2)\r\n      Logarithms\r\n      \r\n      y = log(x)\r\n      Trigonometric functions\r\n      \r\n      y = sin(x)\r\n      y = cos(x)\r\n      y = tan(x)\r\n      Trigonometric functions with degrees\r\n      \r\n      y = sin(45 deg) + x\r\n      Constants\r\n      e, pi, tau`;\r\n\r\n      this.init_plotty();\r\n\r\n      return (\r\n\r\n\r\n         <div>\r\n            <div className=\"app-main\">\r\n               <div className=\"ui centered grid\">\r\n                  {/* Plot */}\r\n                  <div className=\"column plot-box\">\r\n                     <Plot\r\n                        data={this.state.data}\r\n                        layout={this.state.layout}\r\n                        config={this.state.config}\r\n                        frames={this.state.frames}\r\n                     />\r\n                  </div>\r\n\r\n                  {/* Config Pad */}\r\n\r\n                  <div className=\"column config-pad-box\">\r\n                     <div className=\"ui segment\">\r\n\r\n                        <form \r\n                           onSubmit={this.onFormSubmit} \r\n                           onChange={this.onHandleChange} \r\n                           className=\"ui form\" >\r\n\r\n                           {/*  Names */}\r\n                           <div className=\"ui equal width form\">\r\n                              <div className=\"fields\">\r\n                                 <div className=\"eight wide field\">\r\n                                    <label>Graph Title</label>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       placeholder=\"Define title of the chart\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             graphName: e.target.value,\r\n                                          })\r\n                                       }\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n                           \r\n                           {/* X Range  */}\r\n                           <div className=\"ui divider\"></div>\r\n\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"two wide field\">\r\n                                 <label>X-Axis :</label>\r\n                              </div>\r\n                              <div className=\"six wide field\">\r\n                                 <div className=\"ui input\">\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       placeholder=\"Define title of X-Axis\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             xAxis: e.target.value,\r\n                                          })\r\n                                       }\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"four wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Min</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             minX: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       value={this.state.minX}\r\n                                       placeholder=\"Enter Min X.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"four wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Max</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       value={this.state.maxX}\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             maxX: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       placeholder=\"Enter Max X.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                           </div>\r\n\r\n                           {/* Y Range  */}\r\n\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"two wide field\">\r\n                                 <label>Y-Axis :</label>\r\n                              </div>\r\n                              <div className=\"six wide field\">\r\n                                 <div className=\"ui input\">\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       placeholder=\"Define title of Y-Axis\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             yAxis: e.target.value,\r\n                                          })\r\n                                       }\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              {/* <div className=\"four wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Min</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             minY: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       value={this.state.minY}\r\n                                       placeholder=\"Enter Min Y.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n                              <div className=\"four wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Max</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             maxY: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       value={this.state.maxY}\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Enter Max Y.. \"\r\n                                    />\r\n                                 </div>\r\n                              </div> */}\r\n                           </div>\r\n\r\n                           {/* Y = AX + B Functions   */}\r\n                           <div className=\"ui divider\"></div>\r\n                           \r\n                           <div className=\"inline fields\">\r\n                              <div className=\"one wide field\">\r\n                                 <label> \r\n                                    <h4>Y</h4>\r\n                                 </label>\r\n                              </div>\r\n                              <div className=\"one wide field\">\r\n                                 <label>\r\n                                    <h3>=</h3>\r\n                                 </label>\r\n                              </div>\r\n                              <div className=\"seven wide field\" \r\n                              data-tooltip=\"Hello\"\r\n                              data-inverted=\"\"\r\n                              data-variation=\"wide\"\r\n                              data-position=\"top right\"\r\n                              data-title=\"Elliot Fu\">\r\n                                 <input type=\"text\" placeholder=\"ax+b...\"\r\n                                 onChange={e => {\r\n                                    this.setState({ fx1: e.target.value });\r\n                                 }}  \r\n                                  />\r\n                              </div>\r\n                              \r\n\t\t\t\t\t\t\t\t\t\t<div className=\"six wide field\">\r\n                                 <div className=\"ui left labeled input\">\r\n                                    <div className=\"ui basic label\">Name</div>\r\n                                    <input\r\n                                       type=\"text\"\r\n                                       onChange={(e) =>\r\n                                          this.setState({\r\n                                             fx1Name: e.target.value,\r\n                                          })\r\n                                       }\r\n                                       // value={this.state.maxY}\r\n\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Name of the equation\"\r\n                                    />\r\n                                 </div>\r\n                              </div>\r\n\r\n                              <div className=\"one wide field\">\r\n                                 <button\r\n                                    className=\"ui icon button\"\r\n                                    onClick={this.onAdd} >\r\n                                    <i className=\"plus circle icon\"></i>\r\n                                 </button>\r\n                              </div>\r\n                           </div>\r\n                           \r\n                           {/* Divider */}\r\n                           <div className=\"ui divider\"></div>\r\n                           \r\n                           {/* Dynamic Functions */}\r\n                           {this.state.fxs.map((fx, i) => \r\n                              <div key={fx.id} className=\"inline fields\">\r\n                                 <div className=\"one wide field\">\r\n                                    <label>\r\n                                       <h4>Y</h4>\r\n                                    </label>\r\n                                 </div>\r\n                                 <div className=\"one wide field\">\r\n                                    <label>\r\n                                       <h3>=</h3>\r\n                                    </label>\r\n                                 </div>\r\n                                 <div className=\"six wide field\">\r\n                                    <input type=\"text\" placeholder=\"ax+b...\" \r\n                                    onChange={this.onFxChange.bind(this, i)} />\r\n                                 </div>\r\n                                 \r\n                                 <div className=\"six wide field\">\r\n                                    <div className=\"ui left labeled input\">\r\n                                       <div className=\"ui basic label\">Name</div>\r\n                                       <input\r\n                                          type=\"text\"\r\n                                          placeholder=\"Name of the equation\"\r\n                                          onChange={this.onFxNameChange.bind(this, i)}\r\n                                       />\r\n                                    </div>\r\n                                 </div>\r\n\r\n                                 <div className=\"one wide field\">\r\n                                    <div className=\"ui icon button\" onClick={ this.handleColorPick_Click.bind(this, i) }>\r\n                                       {/* <i class=\"tint icon\"></i> */}\r\n                                       <div className=\"default-color\" style={{background : this.state.fxs[i].color}}  />\r\n                                    </div>\r\n                                    { this.state.fxs[i].displayColorPicker ? \r\n                                       <div className=\"popover\">\r\n                                          <div className=\"cover\" onClick={ this.handleColorPick_Close.bind(this, i) }/>\r\n                                          {/* <SketchPicker color={ this.state.fxs[i].color } onChange={ this.handleColorPick_Selected.bind(this, i)} /> */}\r\n                                          <TwitterPicker width='290px' color={ this.state.fxs[i].color } onChange={ this.handleColorPick_Selected.bind(this, i)} />\r\n                                       </div> : null }\r\n                                    {/* <button\r\n                                       className=\"ui icon button\"\r\n                                       onClick={this.onRemove.bind(this, i)} >\r\n                                       <i className=\"minus red circle icon\"></i>\r\n                                    </button> */}\r\n                                 </div>\r\n                                 <div className=\"one wide field\">\r\n                                    <button\r\n                                       className=\"ui icon button\"\r\n                                       onClick={this.onRemove.bind(this, i)} >\r\n                                       <i className=\"minus red circle icon\"></i>\r\n                                    </button>\r\n                                 </div>\r\n                              </div>         \r\n                           )} \r\n\r\n                            {/* Options */}\r\n\r\n                           <div className=\"inline fields\">\r\n\r\n                                 <div className=\"field \">\r\n                                    <label>Legend Option</label>\r\n                                 <select className=\"ui fluid search dropdown\" multiple=\"\" onChange={this.onSelectChange} value={this.state.initialSelect}>\r\n                                    <option key='0' value=\"0\">Show All</option>\r\n                                    {this.state.legendOptions.map( (fx, i) => <option key={fx.index+1} value={fx.index+1}>{fx.name}</option> )}\r\n                                 </select>\r\n                                 </div>\r\n                              \r\n                           </div>\r\n\r\n\r\n                           {/* Resset and  */}\r\n                           <div className=\"inline fields\">\r\n                              <div className=\"field \">\r\n                                 <button\r\n                                    className=\"ui right labeled yellow icon button\"\r\n                                    onClick={this.onReset}\r\n                                 >\r\n                                    <i className=\"right undo icon\"></i>\r\n                                    RESET?\r\n                                 </button>\r\n                              </div>\r\n                              <div className=\"field\">\r\n                                 <button\r\n                                    type=\"submit\"\r\n                                    className=\"ui right labeled pink icon button \" >\r\n                                    <i className=\"right arrow icon\"></i>\r\n                                    PLOT!\r\n                                 </button>\r\n                              </div>\r\n                           </div>\r\n                        </form>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}